# https://docs.github.com/actions

name: Docker CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  metadata:
    name: Metadata
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version-step.outputs.version }}
    steps:
      - uses: actions/checkout@v2.4.0

      - name: Extract current version
        id: version-step
        run: echo "::set-output name=version::$(head -n 1 yourls_version)"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: metadata
    strategy:
      matrix:
        variant: [fpm-alpine, fpm, apache]
    steps:
      - uses: actions/checkout@v2.4.0

      - name: Generate variants
        run: ./bin/generate-variants.sh
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.variant }}
          tags: yourls:${{ needs.metadata.outputs.version }}-${{ matrix.variant }}
          outputs: type=docker,dest=/tmp/container-image.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save image
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.variant }}-image
          path: /tmp/container-image.tar
          retention-days: 1

  testing:
    name: Test
    runs-on: ubuntu-latest
    needs: [metadata, build]
    strategy:
      matrix:
        variant: [fpm-alpine, fpm, apache]
    steps:
      - uses: actions/checkout@v2.4.0
        with:
          repository: docker-library/official-images

      - name: Retrieve image artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.variant }}-image

      - name: Load image
        run: docker load --input container-image.tar

      - name: Test
        run: ./test/run.sh "${IMAGE}"
        env:
          IMAGE: yourls:${{ needs.metadata.outputs.version }}-${{ matrix.variant }}

  analysis:
    name: Analize
    runs-on: ubuntu-latest
    needs: [metadata, build]
    strategy:
      matrix:
        variant: [fpm-alpine, fpm, apache]
    steps:
      - uses: actions/checkout@v2.4.0

      - name: Retrieve image artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.variant }}-image

      - name: Load image
        run: docker load --input container-image.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.2.2
        with:
          image-ref: yourls:${{ needs.metadata.outputs.version }}-${{ matrix.variant }}
          format: template
          template: '@/contrib/sarif.tpl'
          output: trivy-results.sarif

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: trivy-results.sarif
