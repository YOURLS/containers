# https://docs.github.com/actions

name: Release

on:
  workflow_call:
    inputs:
      artifact:
        required: false
        default: true
        type: string
        description: True if analysis must be run against a built artifact
      version:
        required: true
        type: string
        description: Upstream app version
    secrets:
      image:
        required: true
        description: Image name for the container registry

jobs:
  repository:
    name: Repository
    runs-on: ubuntu-latest
    if: inputs.artifact
    permissions:
      contents: write
    steps:
      - name: Retrieve context files
        uses: actions/download-artifact@v3
        with:
          name: context-files

      - run: chmod +x bin/* && chmod +x ./*/docker-entrypoint.sh

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3.9.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
          publish_branch: dist
          enable_jekyll: true

  images:
    name: Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        variant:
          - fpm-alpine
          - fpm
          - apache
    steps:
      - name: Retrieve context files
        uses: actions/download-artifact@v3
        with:
          name: context-files

      - run: chmod +x ./*/docker-entrypoint.sh

      - name: Install Cosign
        uses: sigstore/cosign-installer@v2.8.1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Retrieve image artifact
        uses: actions/download-artifact@v3
        if: inputs.artifact
        with:
          name: ${{ matrix.variant }}-image

      - name: Load artifact image
        if: inputs.artifact
        run: docker load -i container-image.tar

      - name: Docker meta
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: ghcr.io/${{ secrets.image }}
          flavor: |
            latest=${{ matrix.variant == 'apache' }}
            prefix=
            suffix=
          tags: |
            # variant generic
            type=semver,suffix=-${{ matrix.variant }},pattern={{version}},priority=900,value=${{ inputs.version }}
            type=semver,suffix=-${{ matrix.variant }},pattern={{major}}.{{minor}},priority=800,value=${{ inputs.version }}
            type=semver,suffix=-${{ matrix.variant }},pattern={{major}},priority=700,value=${{ inputs.version }}
            type=raw,priority=600,value=${{ matrix.variant }}
            # apache specific
            type=semver,enable=${{ matrix.variant == 'apache' }},pattern={{version}},priority=500,value=${{ inputs.version }}
            type=semver,enable=${{ matrix.variant == 'apache' }},pattern={{major}}.{{minor}},priority=400,value=${{ inputs.version }}
            type=semver,enable=${{ matrix.variant == 'apache' }},pattern={{major}},priority=300,value=${{ inputs.version }}

      - name: Docker build and push
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.variant }}/
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6,linux/386,linux/ppc64le,linux/s390x
          labels: |
            org.opencontainers.image.created=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            org.opencontainers.image.revision=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            org.opencontainers.image.source=https://github.com/${{ secrets.image }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha,scope=${{ matrix.variant }}
          # cache-to: type=gha,scope=${{ matrix.variant }},mode=max
          push: true

      - name: Sign the images with GitHub OIDC
        run: cosign sign ${TAGS}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          COSIGN_EXPERIMENTAL: 1
