# https://docs.github.com/actions

name: Release

on:
  workflow_call:
    inputs:
      artifact:
        required: false
        default: true
        type: boolean
        description: True if analysis must be run against a built artifact
      version:
        required: true
        type: string
        description: Upstream app version

jobs:
  repository:
    name: Repository
    runs-on: ubuntu-latest
    if: inputs.artifact
    permissions:
      contents: write
    steps:
      - name: Retrieve context files
        uses: actions/download-artifact@v4
        with:
          name: context-files

      - run: chmod +x bin/* && chmod +x ./*/container-entrypoint.sh

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
          publish_branch: dist
          enable_jekyll: true

  images:
    name: Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        variant:
          - apache
          - fpm
          - fpm-alpine
        # platform:
        #   - linux/amd64
        #   - linux/arm64
        #   - linux/arm/v7
        #   # - linux/arm/v6
        #   - linux/arm/v5
        #   - linux/386
        #   - linux/mips64le
        #   - linux/ppc64le
        #   - linux/s390x
        # exclude:
        #   - variant: fpm-alpine
        #     platform: linux/arm/v5
        #   - variant: fpm-alpine
        #     platform: linux/mips64le
        # include:
        #   - variant: fpm-alpine
        #     platform: linux/arm/v6
        #   # - variant: fpm-alpine
        #   #   platform: linux/riscv64
        include:
          - variant: apache
            platform: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v5,linux/386,linux/mips64le,linux/ppc64le,linux/s390x
          - variant: fpm
            platform: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v5,linux/386,linux/mips64le,linux/ppc64le,linux/s390x
          - variant: fpm-alpine
            platform: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6,linux/386,linux/ppc64le,linux/s390x
    steps:
      - name: Retrieve context files
        uses: actions/download-artifact@v4
        with:
          name: context-files

      - run: chmod +x ./*/container-entrypoint.sh

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Retrieve image artifact
        uses: actions/download-artifact@v4
        if: inputs.artifact
        # if: ${{ inputs.artifact && matrix.platform == 'linux/amd64' }}
        with:
          name: ${{ matrix.variant }}-image

      - name: Load artifact image
        if: inputs.artifact
        # if: ${{ inputs.artifact && matrix.platform == 'linux/amd64' }}
        run: docker load -i container-image.tar

      - name: Docker meta
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ghcr.io/${{ vars.REGISTRY_IMAGE }}
          flavor: |
            latest=${{ matrix.variant == 'apache' }}
            prefix=
            suffix=
          tags: |
            # variant generic
            type=semver,suffix=-${{ matrix.variant }},pattern={{version}},priority=900,value=${{ inputs.version }}
            type=semver,suffix=-${{ matrix.variant }},pattern={{major}}.{{minor}},priority=800,value=${{ inputs.version }}
            type=semver,suffix=-${{ matrix.variant }},pattern={{major}},priority=700,value=${{ inputs.version }}
            type=raw,priority=600,value=${{ matrix.variant }}
            # apache specific
            type=semver,enable=${{ matrix.variant == 'apache' }},pattern={{version}},priority=500,value=${{ inputs.version }}
            type=semver,enable=${{ matrix.variant == 'apache' }},pattern={{major}}.{{minor}},priority=400,value=${{ inputs.version }}
            type=semver,enable=${{ matrix.variant == 'apache' }},pattern={{major}},priority=300,value=${{ inputs.version }}

      - name: Docker build and push
        uses: docker/build-push-action@v6
        id: build
        with:
          context: ./${{ matrix.variant }}/
          platforms: ${{ matrix.platform }}
          labels: |
            org.opencontainers.image.created=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            org.opencontainers.image.revision=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            org.opencontainers.image.source=https://github.com/${{ vars.REGISTRY_IMAGE }}
            org.opencontainers.image.version=${{ inputs.version }}
            org.opencontainers.image.title=YOURLS
            org.opencontainers.image.description=Your Own URL Shortener
            org.opencontainers.image.url=https://yourls.org
            org.opencontainers.image.documentation=https://yourls.org
            org.opencontainers.image.vendor=YOURLS Org
            org.opencontainers.image.authors=YOURLS
            org.opencontainers.image.licenses=MIT
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/YOURLS/images/main/images/yourls/README.md
            io.artifacthub.package.alternative-locations=docker.io/library/yourls
            io.artifacthub.package.logo-url=https://yourls.org/images/yourls-logo.svg
          outputs: >-
            type=image,
            name=ghcr.io/${{ vars.REGISTRY_IMAGE }},
            name-canonical=true,
            annotation-index.org.opencontainers.image.created=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }},
            annotation-index.org.opencontainers.image.revision=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }},
            annotation-index.org.opencontainers.image.source=https://github.com/${{ vars.REGISTRY_IMAGE }},
            annotation-index.org.opencontainers.image.version=${{ inputs.version }},
            annotation-index.org.opencontainers.image.title=YOURLS,
            annotation-index.org.opencontainers.image.description=Your Own URL Shortener,
            annotation-index.org.opencontainers.image.url=https://yourls.org,
            annotation-index.org.opencontainers.image.documentation=https://yourls.org,
            annotation-index.org.opencontainers.image.vendor=YOURLS Org,
            annotation-index.org.opencontainers.image.authors=YOURLS,
            annotation-index.org.opencontainers.image.licenses=MIT,
            annotation-index.io.artifacthub.package.readme-url=https://raw.githubusercontent.com/YOURLS/images/main/images/yourls/README.md,
            annotation-index.io.artifacthub.package.alternative-locations=docker.io/library/yourls,
            annotation-index.io.artifacthub.package.logo-url=https://yourls.org/images/yourls-logo.svg
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha,scope=${{ matrix.variant }}
          # cache-to: type=gha,scope=${{ matrix.variant }},mode=max
          push: true

      - name: Sign the image with GitHub OIDC
        run: cosign sign --yes "${IMAGE}"
        env:
          IMAGE: ghcr.io/${{ vars.REGISTRY_IMAGE }}@${{ steps.build.outputs.digest }}

      # - name: Export digest
      #   run: |
      #     mkdir -p /tmp/digests/${{ matrix.variant }}
      #     digest="${{ steps.build.outputs.digest }}"
      #     touch "/tmp/digests/${{ matrix.variant }}/${digest#sha256:}"

      # - name: Upload digest
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: digests
      #     path: /tmp/digests/*
      #     if-no-files-found: error
      #     retention-days: 1

  # digest:
  #   name: Digest
  #   runs-on: ubuntu-latest
  #   needs:
  #     - images
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       variant:
  #         - apache
  #         - fpm
  #         - fpm-alpine
  #   steps:
  #     - name: Download digests
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: digests
  #         path: /tmp/digests

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ghcr.io/${{ vars.REGISTRY_IMAGE }}

  #     - name: Login to Container Registry
  #       uses: docker/login-action@v3.3.0
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Create manifest list and push
  #       working-directory: /tmp/digests/${{ matrix.variant }}
  #       run: |
  #         docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
  #           $(printf 'ghcr.io/${{ vars.REGISTRY_IMAGE }}@sha256:%s ' *)

  #     - name: Inspect image
  #       run: |
  #         docker buildx imagetools inspect ghcr.io/${{ vars.REGISTRY_IMAGE }}:${{ matrix.variant }}
